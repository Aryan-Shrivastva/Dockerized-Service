name: Deploy Dockerized Node.js Service

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run application tests
        run: npm run test:ci
        env:
          APP_USERNAME: admin
          APP_PASSWORD: secretpassword123
          SECRET_MESSAGE: "This is a test secret message! You have successfully authenticated."
          PORT: 3005
          NODE_ENV: test

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Remote Server
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # Stop existing container if running
            docker stop nodejs-service || true
            docker rm nodejs-service || true
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Run new container
            docker run -d \
              --name nodejs-service \
              --restart unless-stopped \
              -p 80:3000 \
              -e APP_USERNAME="${{ secrets.APP_USERNAME }}" \
              -e APP_PASSWORD="${{ secrets.APP_PASSWORD }}" \
              -e SECRET_MESSAGE="${{ secrets.SECRET_MESSAGE }}" \
              -e NODE_ENV=production \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Clean up old images
            docker image prune -f
          EOF

      - name: Health Check
        run: |
          sleep 10
          curl -f http://${{ secrets.SERVER_HOST }}/ || exit 1

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    
    steps:
      - name: Deployment Success
        if: needs.deploy.result == 'success'
        run: |
          echo "Deployment successful!"
          echo "Application is running at: http://${{ secrets.SERVER_HOST }}"
      
      - name: Deployment Failed
        if: needs.deploy.result == 'failure'
        run: |
          echo "Deployment failed!"
          exit 1